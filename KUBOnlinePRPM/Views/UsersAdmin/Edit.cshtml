@model KUBOnlinePRPM.Models.User

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var roleList = ViewBag.roleList;
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>User</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


    @Html.HiddenFor(model => model.userId)

    <div class="form-group">
        @Html.LabelFor(model => model.companyId, "companyId", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("companyId", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.companyId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.userName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.userName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.userName, "", new { @class = "text-danger" })
        </div>
    </div>
    <!--
            <div class="form-group">
                @Html.LabelFor(model => model.reminderQueryQuestion, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.reminderQueryQuestion, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.reminderQueryQuestion, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.reminderQueryAnswer, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.reminderQueryAnswer, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.reminderQueryAnswer, "", new { @class = "text-danger" })
                </div>
            </div>
    -->
    <div class="form-group">
        @Html.LabelFor(model => model.emailAddress, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.emailAddress, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.emailAddress, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.firstName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.firstName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.firstName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.lastName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.lastName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.lastName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.employeeNo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.employeeNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.employeeNo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.jobTitle, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.jobTitle, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.jobTitle, "", new { @class = "text-danger" })
        </div>
    </div>
    <!--
    <div class="form-group">
        @Html.LabelFor(model => model.loginDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.loginDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.loginDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.loginLatLng, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.loginLatLng, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.loginLatLng, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.loginAddress, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.loginAddress, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.loginAddress, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.lastLoginDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.lastLoginDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.lastLoginDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.lastFailedLoginDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.lastFailedLoginDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.lastFailedLoginDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.failedLoginAttempts, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.failedLoginAttempts, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.failedLoginAttempts, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.lockout, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.lockout)
                @Html.ValidationMessageFor(model => model.lockout, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.lockoutDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.lockoutDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.lockoutDate, "", new { @class = "text-danger" })
        </div>
    </div>
        -->
    <div class="form-group">
        @Html.LabelFor(model => model.status, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.status)
                @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.telephoneNo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.telephoneNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.telephoneNo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.address, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.address, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.address, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.extensionNo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.extensionNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.extensionNo, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.superiorId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("superiorId", ViewBag.superiorIdList as SelectList, string.Empty, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.superiorId, "", new { @class = "text-danger" })
        </div>
    </div>

    <h3>Roles</h3>

    @foreach (var item in roleList)
    {

        <div class="checkbox">
            <label>
                @if (Model.Users_Roles.Any(x => x.roleId == @item.roleId))
                {
                    <input class="assignRole" type="checkbox" value="@item.roleId" name="roles[]" checked>@item.roleName
                }
                else
                {
                    <input class="assignRole" type="checkbox" value="@item.roleId" name="roles[]">@item.roleName
                }

            </label>
        </div>
    }
    @if (Model.companyId == 2 && ViewBag.HOD != null)
    {
        <div class="checkbox">
            <label>
                @if (ViewBag.childCompanyId != null)
                {
                    <input class="assignChildCompanyId" type="checkbox" value="R02" name="roles[]" checked>
                }
                else
                {
                    <input class="assignChildCompanyId" type="checkbox" value="" name="roles[]">
                }
                Initial Approver
            </label>
        </div>
    }

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
}
@section scripts {
    <script>
        var department = "@Model.department"; var childCompanyId = "@Model.childCompanyId"; var companyId = "@Model.companyId";
    $(document).on('ready', function () {       
        $('.assignRole').change(function () {
            var action = this.checked? "assign" : "remove";
            var userId = parseInt(@Model.userId);
            var roleId = this.value;

            UpdateRoles(userId, roleId, null, action);
        });

        $(".assignChildCompanyId").change(function () {
            if (department == "Group Risk &amp; Audit Division") {
                childCompanyId = "1";
            } else if (department == "Group Legal Division") {
                childCompanyId = "3";
            } else if (department == "Corporate Planning &amp; Operational Excellence") {
                childCompanyId = "5";
            } else if (department == "Group Finance Division" || department == "Financial Reporting") {
                childCompanyId = "9";
            } else if (department == "Corporate Communication") {
                childCompanyId = "10";
            } else if (department == "Information Technology") {
                childCompanyId = "11";
            } else if (department == "Group Secretarial Division") {
                childCompanyId = "14";
            } else if (department == "Group Human Capital Division" || department == "Corporate Services") {
                childCompanyId = "15";
            } 

            var action = this.checked? "assign" : "remove";
            var userId = parseInt(@Model.userId);
            var roleId = this.value;            

            UpdateRoles(userId, roleId, childCompanyId, action);
        });

        function UpdateRoles(userId, roleId, childCompanyId, action) {
            Url = "@Url.Action("UpdateRoles", "Roles")";

            $.post(Url, {
                userId: userId,
                roleId: roleId,
                childCompanyId: childCompanyId,
                action: action
            }, function (resp) {
                //console.log(resp)
                //alert("Successfully update role");
                if (resp.success) {
                    alert("Successfully update role");
                }
            });
        }

    });
    </script>

}